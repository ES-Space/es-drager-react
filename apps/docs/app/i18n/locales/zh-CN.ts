export default {
  common: {
    title: 'ES Drager',
    description: 'React 轻量级拖拽组件',
  },
  header: {
    examples: '示例',
    documentation: '文档',
    github: 'GitHub',
  },
  nav: {
    installation: '安装',
    quickStart: '快速开始',
    props: '属性',
    events: '事件',
    dragging: '拖拽',
    resize: '调整大小',
    rotation: '旋转',
    scaling: '缩放',
    skew: '倾斜',
    connections: '连接',
    types: '类型',
  },
  examples: {
    basicUsage: '基本用法',
    withConstraints: '限制区域',
    withRotation: '可旋转',
    withScale: '可缩放',
    withGuidelines: '参考线',
    withSnapping: '吸附效果',
    withResize: '调整大小',
    withSkew: '可倾斜',
    combined: '组合功能',
    dragMe: '拖动我',
    draggableArea: '可拖拽区域',
    boundedBox: '受限区域',
    tryDraggingMe: '试着拖动我',
    rotatableBox: '可旋转区域',
    tryRotatingMe: '试着旋转我',
    scalableBox: '可缩放区域',
    useMouseWheel: '使用鼠标滚轮',
    dragToSeeGuides: '拖动以显示参考线',
    snapBox1: '吸附框1',
    snapBox2: '吸附框2',
    resizableBox: '可调整大小区域',
    dragToResize: '拖动边角/边缘调整大小',
    skewableBox: '可倾斜区域',
    dragEdgesToSkew: '拖动边缘倾斜',
    combinedBox: '全功能区域',
    allFeatures: '尝试所有功能',
    withConnections: '带有连接',
    hoverToConnect: '悬停蓝点并拖动到另一个点以创建连接',
    connectMe: '连接我！',
  },
  introduction: {
    title: 'ES Drager',
    lead: '轻量级 React 拖拽、旋转、缩放与连接组件',
    overview: '概述',
    overviewDesc: 'ES Drager 提供简单而强大的方式，为任意 React 组件添加拖拽、旋转、缩放、调整大小、倾斜等功能。内置连接、对齐参考线、位置约束和吸附，适用于：',
    usecase: {
      diagram: '图表编辑器',
      visual: '可视化搭建',
      interactive: '交互界面',
      layout: '布局工具',
      flow: '流程图',
      design: '设计工具',
    },
    demo: '交互演示',
    quickExample: '快速示例',
    nextSteps: '下一步',
    next: {
      install1: '请先阅读',
      install2: '安装指南',
      install3: '快速开始',
      drag1: '了解基本',
      drag2: '拖拽',
      drag3: '功能',
      adv1: '探索更多高级特性，如',
      adv2: '连接',
      adv3: '和',
      adv4: '位置约束',
    },
  },
  docs: {
    sidebar: {
      gettingStarted: '快速开始',
      introduction: '介绍',
      installation: '安装',
      quickStart: '快速上手',
      features: '功能',
      dragging: '拖拽',
      rotation: '旋转',
      scaling: '缩放',
      resize: '调整大小',
      skew: '倾斜',
      connections: '连接',
      api: 'API',
      props: '属性',
      events: '事件',
      types: '类型',
    },
  },
  installation: {
    title: '安装',
    desc: 'ES Drager 可通过 npm、yarn 或 pnpm 安装。',
    npm: '使用 npm',
    yarn: '使用 yarn',
    pnpm: '使用 pnpm',
    peer: '依赖包要求',
    peerDesc: 'ES Drager 需要 React 18 或更高版本作为依赖，请确保已安装：',
  },
  quickStart: {
    title: '快速上手',
    desc: '几分钟即可开始使用 ES Drager。',
    basicUsage: '基本用法',
    basicUsageDesc: '引入 Drager 组件，将其包裹在你想要实现拖拽的内容外层：',
    addingFeatures: '添加特性',
    addingFeaturesDesc: '通过简单的属性即可启用旋转和缩放：',
    addingConnections: '添加连接',
    addingConnectionsDesc: '启用连接点，创建节点式界面：',
  },
  dragging: {
    title: '拖拽',
    desc: '了解如何使用 ES Drager 的拖拽功能。',
    basic: '基础拖拽',
    basicDesc: '默认情况下，任何 Drager 组件都可以通过点击并拖动来移动：',
    movementConstraints: '移动约束',
    movementConstraintsDesc: '你可以通过 limit 属性限制可移动区域：',
    constrainedArea: '受限区域',
    limitedMove: '受限移动',
    dragEvents: '拖拽事件',
    dragEventsDesc: 'ES Drager 提供了三个拖拽相关事件：',
    onDragStartDesc: '开始拖拽时触发',
    onDragDesc: '拖拽过程中持续触发',
    onDragEndDesc: '拖拽结束时触发',
    checkConsole: '查看控制台',
    openConsoleDesc: '打开浏览器控制台可查看事件触发情况。',
  },
  rotation: {
    title: '旋转',
    desc: 'ES Drager 内置旋转功能，只需一个属性即可启用。',
    basic: '基础旋转',
    basicDesc: '设置 rotatable 属性即可启用旋转，元素上方会出现旋转手柄：',
    tip: '拖动元素上方的旋转手柄进行旋转。',
    initialRotation: '初始旋转',
    initialRotationDesc: '你可以通过 rotation 属性（单位：度）设置初始旋转角度：',
    rotation45: '45° 旋转',
    rotationEvents: '旋转事件',
    rotationEventsDesc: 'ES Drager 提供 onRotate 事件监听旋转变化：',
    combinedWithDragging: '与拖拽结合',
    combinedWithDraggingDesc: '旋转可与拖拽等特性组合使用：',
  },
  scaling: {
    title: '缩放',
    desc: 'ES Drager 支持通过鼠标滚轮进行缩放。',
    basic: '基础缩放',
    basicDesc: '设置 scalable 属性即可启用缩放：',
    tip: '将鼠标悬停在元素上滚动滚轮即可缩放。',
    scaleLimits: '缩放限制',
    scaleEvents: '缩放事件',
    combinedFeatures: '组合特性',
  },
  skew: {
    title: '倾斜',
    desc: 'ES Drager 通过元素边缘的拖拽手柄实现倾斜变换，可分别控制 X 轴和 Y 轴倾斜。',
    basic: '基础用法',
    basicDesc: '只需为 Drager 组件添加 skewable 属性即可启用倾斜：',
    handles: '倾斜手柄',
    handlesDesc: '启用 skewable 后，会出现 4 个倾斜手柄：',
    handlesHorizontal: '上下边缘手柄控制 X 轴倾斜（水平剪切）',
    handlesVertical: '左右边缘手柄控制 Y 轴倾斜（垂直剪切）',
    tip: '拖动边缘的蓝色方块进行倾斜变换。',
    skewLimits: '倾斜限制',
    skewLimitsDesc: '你可以通过 minSkew 和 maxSkew 属性限制倾斜角度：',
    initialSkew: '初始倾斜',
    initialSkewDesc: '你可以通过 skewX 和 skewY 属性设置初始倾斜角度：',
    skewEvents: '倾斜事件',
    skewEventsDesc: 'ES Drager 提供 onSkew 事件监听倾斜变化：',
    combining: '与其他特性结合',
    combiningDesc: '倾斜可与旋转、缩放、调整大小等特性组合使用：',
    skewableBox: '可倾斜区域',
    trySkewing: '试着倾斜我',
  },
  resize: {
    title: '调整大小',
    desc: 'ES Drager 通过元素边缘和角上的拖拽手柄实现调整大小，可自由调整或保持比例。',
    basic: '基础用法',
    basicDesc: '只需为 Drager 组件添加 resizable 属性即可启用调整大小：',
    handles: '调整手柄',
    handlesDesc: '启用 resizable 后，会出现 8 个调整手柄：',
    handlesCorner: '四个角手柄（左上、右上、左下、右下）',
    handlesEdge: '四个边手柄（上、右、下、左）',
    combining: '与其他特性结合',
    combiningDesc: '调整大小可与旋转、缩放、连接等特性组合使用：',
  },
  connections: {
    title: '连接',
    desc: 'ES Drager 提供强大的连接系统，可通过锚点和贝塞尔曲线创建元素间的可视化关系。',
    basic: '基础连接',
    basicDesc: '设置 connectable 属性并提供唯一 id 即可启用连接：',
    tip: '悬停蓝色锚点并拖动到另一个锚点即可创建连接，连接线为贝塞尔曲线。',
    connectionEvents: '连接事件',
    connectionEventsDesc: '通过 onConnect 事件追踪连接，事件会提供源节点和目标节点信息：',
    connectMe: '连接我',
    toMe: '连接到我',
    connectionFeatures: '连接特性',
    fourAnchors: '每个节点有四个锚点（上、右、下、左）',
    visualFeedback: '连接创建过程有可视化反馈',
    automaticBezier: '自动计算贝塞尔曲线路径',
    autoUpdate: '节点移动时连接线自动更新',
    clickToSelect: '点击连接线可选中',
    deleteConnections: '按 Delete/Backspace 删除选中连接',
    complexExample: '复杂示例',
    complexExampleDesc: '连接可与旋转、缩放无缝配合：',
    node1: '节点1',
    node2: '节点2',
    node3: '节点3',
    tryConnections: '尝试在旋转和缩放节点时创建连接，连接线会自动保持位置。',
  },
  events: {
    title: '事件处理',
    desc: 'ES Drager 提供丰富的事件处理，助你构建交互界面。',
    basic: '基础事件',
    drag: '拖拽事件',
    transform: '变换事件',
    connection: '连接事件',
    example: '用法示例',
  },
  props: {
    title: '属性参考',
    basic: '基础属性',
    prop: '属性',
    type: '类型',
    default: '默认值',
    description: '说明',
    id: { description: '元素唯一标识，connectable 为 true 时必填。' },
    className: { description: '额外的 CSS 类名。' },
    style: { description: '用于尺寸（宽高、最小宽高等）和外观的内联样式。' },
    selected: { description: '元素是否被选中。' },
    disabled: { description: '元素是否禁用。' },
    draggable: { description: '元素是否可拖拽。' },
    position: '位置属性',
    top: { description: '元素的上边距。' },
    left: { description: '元素的左边距。' },
    feature: '特性属性',
    rotatable: { description: '元素是否可旋转。' },
    rotation: { description: '初始旋转角度（度）。' },
    scalable: { description: '元素是否可缩放。' },
    resizable: { description: '元素是否可调整大小。' },
    skewable: { description: '元素是否可倾斜。' },
    skewX: { description: '初始 X 轴倾斜角度（度）。' },
    skewY: { description: '初始 Y 轴倾斜角度（度）。' },
    minSkew: { description: '最小倾斜角度。' },
    maxSkew: { description: '最大倾斜角度。' },
    connectable: { description: '元素是否可与其他元素连接。' },
    showGuides: { description: '拖拽时是否显示对齐参考线。' },
    snapToElements: { description: '拖拽时是否吸附到其他元素。' },
    snapThreshold: { description: '吸附距离阈值（像素）。' },
    constraint: '约束属性',
    limit: { description: '元素的移动边界。' },
    minScale: { description: '最小缩放比例。' },
    maxScale: { description: '最大缩放比例。' },
    event: '事件属性',
    onBlur: { description: '元素失焦时触发。' },
    onClick: { description: '元素点击时触发。' },
    onDragStart: { description: '开始拖拽时触发。' },
    onDrag: { description: '拖拽时触发，参数为当前位置。' },
    onDragEnd: { description: '拖拽结束时触发，参数为最终位置。' },
    onRotate: { description: '旋转角度变化时触发。' },
    onScale: { description: '缩放比例变化时触发。' },
    onResize: { description: '尺寸变化时触发。' },
    onSkew: { description: '倾斜角度变化时触发。' },
    onConnect: { description: '建立连接时触发。' },
  },
  types: {
    title: '类型定义',
    dragerProps: 'DragerProps',
    dragerPropsDesc: 'Drager 组件的主要属性接口。',
    connection: 'Connection',
    connectionDesc: '表示两个 Drager 元素之间的连接。',
    anchorPosition: 'AnchorPosition',
    anchorPositionDesc: '连接锚点的有效位置。',
    resizePosition: 'ResizePosition',
    resizePositionDesc: '调整手柄的有效位置。',
    skewPosition: 'SkewPosition',
    skewPositionDesc: '倾斜手柄的有效位置。',
    example: '用法示例',
    exampleDesc: '以下是这些类型在 TypeScript 中的用法：',
  },
}
