export default {
  common: {
    title: 'ES Drager',
    description: 'A lightweight draggable component for React',
  },
  header: {
    examples: 'Examples',
    documentation: 'Documentation',
    github: 'GitHub',
  },
  nav: {
    installation: 'Installation',
    quickStart: 'Quick Start',
    props: 'Props',
    events: 'Events',
    dragging: 'Dragging',
    resize: 'Resize',
    rotation: 'Rotation',
    scaling: 'Scaling',
    connections: 'Connections',
    types: 'Types',
  },
  examples: {
    basicUsage: 'Basic Usage',
    withConstraints: 'With Constraints',
    withRotation: 'With Rotation',
    withScale: 'With Scale',
    withGuidelines: 'With Guidelines',
    withSnapping: 'With Snapping',
    withResize: 'With Resize',
    dragMe: 'Drag me',
    draggableArea: 'Draggable Area',
    boundedBox: 'Bounded Box',
    tryDraggingMe: 'Try dragging me',
    rotatableBox: 'Rotatable Box',
    tryRotatingMe: 'Try rotating me',
    scalableBox: 'Scalable Box',
    useMouseWheel: 'Use mouse wheel',
    dragToSeeGuides: 'Drag to see guides',
    snapBox1: 'Snap Box 1',
    snapBox2: 'Snap Box 2',
    resizableBox: 'Resizable Box',
    dragToResize: 'Drag corners/edges to resize',
    withConnections: 'With Connections',
    hoverToConnect: 'Hover over the blue dots and drag to another dot to create a connection',
    connectMe: 'Connect me!',
  },
  introduction: {
    title: 'ES Drager',
    lead: 'A lightweight React component for creating draggable, rotatable and scalable elements with connection capabilities.',
    overview: 'Overview',
    overviewDesc: 'ES Drager provides a simple yet powerful way to add drag, rotate, scale, and resize functionality to any React component. With built-in support for connections, alignment guides, position constraints, and snapping, it\'s perfect for building:',
    usecase: {
      diagram: 'Diagram editors',
      visual: 'Visual builders',
      interactive: 'Interactive interfaces',
      layout: 'Layout tools',
      flow: 'Flow charts',
      design: 'Design tools',
    },
    demo: 'Interactive Demo',
    quickExample: 'Quick Example',
    nextSteps: 'Next Steps',
    next: {
      install1: 'Check out the ',
      install2: 'Installation',
      install3: ' guide to get started',
      drag1: 'Learn about basic ',
      drag2: 'dragging',
      drag3: ' functionality',
      adv1: 'Explore advanced features like ',
      adv2: 'connections',
      adv3: ' and ',
      adv4: 'position constraints',
    },
  },
  docs: {
    sidebar: {
      gettingStarted: 'Getting Started',
      introduction: 'Introduction',
      installation: 'Installation',
      quickStart: 'Quick Start',
      features: 'Features',
      dragging: 'Dragging',
      rotation: 'Rotation',
      scaling: 'Scaling',
      resize: 'Resize',
      connections: 'Connections',
      api: 'API',
      props: 'Props',
      events: 'Events',
      types: 'Types',
    },
  },
  installation: {
    title: 'Installation',
    desc: 'ES Drager can be installed via npm, yarn, or pnpm.',
    npm: 'Using npm',
    yarn: 'Using yarn',
    pnpm: 'Using pnpm',
    peer: 'Peer Dependencies',
    peerDesc: 'ES Drager requires React 18 or later as a peer dependency. Make sure you have it installed in your project:',
  },
  quickStart: {
    title: 'Quick Start',
    desc: 'Get started with ES Drager in just a few minutes.',
    basicUsage: 'Basic Usage',
    basicUsageDesc: 'Import the Drager component and use it to wrap any content you want to make draggable:',
    addingFeatures: 'Adding Features',
    addingFeaturesDesc: 'Enable rotation and scaling with simple props:',
    addingConnections: 'Adding Connections',
    addingConnectionsDesc: 'Enable connection points to create node-based interfaces:',
  },
  dragging: {
    title: 'Dragging',
    desc: 'Learn how to use ES Drager\'s dragging functionality.',
    basic: 'Basic Dragging',
    basicDesc: 'By default, any Drager component can be dragged by clicking and holding:',
    movementConstraints: 'Movement Constraints',
    movementConstraintsDesc: 'You can limit the movement area using the limit prop:',
    constrainedArea: 'Constrained Area',
    limitedMove: 'Limited move',
    dragEvents: 'Drag Events',
    dragEventsDesc: 'ES Drager provides three events for drag interactions:',
    onDragStartDesc: 'Called when dragging begins',
    onDragDesc: 'Called continuously while dragging',
    onDragEndDesc: 'Called when dragging ends',
    checkConsole: 'Check console',
    openConsoleDesc: 'Open your browser\'s console to see the events being fired.',
  },
  rotation: {
    title: 'Rotation',
    desc: 'ES Drager provides built-in rotation functionality that can be enabled with a single prop.',
    basic: 'Basic Rotation',
    basicDesc: 'Enable rotation by setting the rotatable prop. A rotation handle will appear above the element:',
    tip: 'Drag the rotation handle above the element to rotate it.',
    initialRotation: 'Initial Rotation',
    initialRotationDesc: 'You can set an initial rotation angle using the rotation prop (in degrees):',
    rotation45: '45Â° Rotation',
    rotationEvents: 'Rotation Events',
    rotationEventsDesc: 'ES Drager provides an onRotate event for rotation changes:',
    combinedWithDragging: 'Combined with Dragging',
    combinedWithDraggingDesc: 'Rotation can be combined with dragging and other features:',
  },
  scaling: {
    title: 'Scaling',
    desc: 'ES Drager supports scaling functionality through mouse wheel interaction.',
    basic: 'Basic Scaling',
    basicDesc: 'Enable scaling by setting the scalable prop:',
    tip: 'Use your mouse wheel while hovering over the element to scale it.',
    scaleLimits: 'Scale Limits',
    scaleEvents: 'Scale Events',
    combinedFeatures: 'Combined Features',
  },
  resize: {
    title: 'Resize',
    desc: 'ES Drager provides resize functionality through draggable handles on the edges and corners of the element. This allows for intuitive resizing of elements while maintaining aspect ratio or freely adjusting dimensions.',
    basic: 'Basic Usage',
    basicDesc: 'To enable resizing, simply add the resizable prop to your Drager component:',
    handles: 'Resize Handles',
    handlesDesc: 'When resizable is enabled, eight resize handles appear:',
    handlesCorner: 'Four corner handles (top-left, top-right, bottom-left, bottom-right)',
    handlesEdge: 'Four edge handles (top, right, bottom, left)',
    combining: 'Combining with Other Features',
    combiningDesc: 'Resize functionality can be combined with other features like rotation, scaling, and connections:',
  },
  connections: {
    title: 'Connections',
    desc: 'ES Drager provides a powerful connection system that allows you to create visual relationships between elements using anchor points and bezier curves.',
    basic: 'Basic Connections',
    basicDesc: 'To enable connections, set the connectable prop and provide a unique id:',
    tip: 'Hover over the blue dots (anchor points) and drag to another anchor point to create a connection. The connection will be visualized as a bezier curve.',
    connectionEvents: 'Connection Events',
    connectionEventsDesc: 'Track connections using the onConnect event handler. This event provides details about the source and target nodes:',
    connectMe: 'Connect me',
    toMe: 'To me',
    connectionFeatures: 'Connection Features',
    fourAnchors: 'Four anchor points per node (top, right, bottom, left)',
    visualFeedback: 'Visual feedback during connection creation',
    automaticBezier: 'Automatic bezier curve path calculation',
    autoUpdate: 'Connection lines update automatically when nodes move',
    clickToSelect: 'Click on connection lines to select them',
    deleteConnections: 'Press Delete/Backspace to remove selected connections',
    complexExample: 'Complex Example',
    complexExampleDesc: 'Connections work seamlessly with rotation and scaling:',
    node1: 'Node 1',
    node2: 'Node 2',
    node3: 'Node 3',
    tryConnections: 'Try creating connections between nodes while rotating and scaling them. The connections will automatically update to maintain their positions.',
  },
  events: {
    title: 'Event Handlers',
    desc: 'ES Drager provides a rich set of event handlers to help you build interactive interfaces.',
    basic: 'Basic Events',
    drag: 'Drag Events',
    transform: 'Transform Events',
    connection: 'Connection Events',
    example: 'Usage Example',
  },
  props: {
    title: 'Props Reference',
    basic: 'Basic Props',
    prop: 'Prop',
    type: 'Type',
    default: 'Default',
    description: 'Description',
    id: { description: 'Unique identifier for the element. Required when connectable is true.' },
    className: { description: 'Additional CSS classes.' },
    style: { description: 'Inline styles for dimensions (width, height, minWidth, etc.) and appearance.' },
    selected: { description: 'Whether the element is selected.' },
    disabled: { description: 'Whether the element is disabled.' },
    draggable: { description: 'Whether the element can be dragged.' },
    position: 'Position Props',
    top: { description: 'Top position of the element.' },
    left: { description: 'Left position of the element.' },
    feature: 'Feature Props',
    rotatable: { description: 'Whether the element can be rotated.' },
    rotation: { description: 'Initial rotation angle in degrees.' },
    scalable: { description: 'Whether the element can be scaled.' },
    resizable: { description: 'Whether the element can be resized.' },
    connectable: { description: 'Whether the element can be connected to other elements.' },
    showGuides: { description: 'Whether to show alignment guides while dragging.' },
    snapToElements: { description: 'Whether to snap to other elements while dragging.' },
    snapThreshold: { description: 'Distance threshold for snapping in pixels.' },
    constraint: 'Constraint Props',
    limit: { description: 'Movement boundaries for the element.' },
    minScale: { description: 'Minimum scale factor.' },
    maxScale: { description: 'Maximum scale factor.' },
    event: 'Event Props',
    onBlur: { description: 'Called when the element loses focus.' },
    onClick: { description: 'Called when the element is clicked.' },
    onDragStart: { description: 'Called when dragging starts.' },
    onDrag: { description: 'Called while dragging with current position.' },
    onDragEnd: { description: 'Called when dragging ends with final position.' },
    onRotate: { description: 'Called when rotation changes with current angle.' },
    onScale: { description: 'Called when scale changes with current scale factor.' },
    onResize: { description: 'Called when size changes with new dimensions.' },
    onConnect: { description: 'Called when a connection is established.' },
  },
  types: {
    title: 'Type Definitions',
    dragerProps: 'DragerProps',
    dragerPropsDesc: 'The main props interface for the Drager component.',
    connection: 'Connection',
    connectionDesc: 'Represents a connection between two Drager elements.',
    anchorPosition: 'AnchorPosition',
    anchorPositionDesc: 'Valid positions for connection anchors.',
    resizePosition: 'ResizePosition',
    resizePositionDesc: 'Valid positions for resize handles.',
    example: 'Usage Example',
    exampleDesc: 'Here\'s how to use these types in your TypeScript code:',
  },
}
